{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cartographic modeling","text":"<p>A collection of concepts and workflows that apply cartographic modeling to landscape with methods for Google Earth Engine and Whitebox Tools Open Core.      </p> <p>Jeff Howarth Geography Department Middlebury College</p>"},{"location":"concepts/change/","title":"change concepts","text":"<p>The purpose of planning is to inform and influence changes on the land. As such, planning with maps relies on cartographic models for representing spatial change.  </p>"},{"location":"concepts/change/#evolution-of-a-single-entity","title":"evolution of a single entity","text":""},{"location":"concepts/change/#basic-changes","title":"basic changes","text":"<p>appearance, disappearance, stability  </p>"},{"location":"concepts/change/#transformations","title":"transformations","text":"<p>expansion, contraction, deformation   </p>"},{"location":"concepts/change/#movements","title":"movements","text":"<p>translation, rotation  </p>"},{"location":"concepts/change/#processes","title":"processes","text":""},{"location":"concepts/change/#replacement","title":"replacement","text":"<p>succession, permutation  </p>"},{"location":"concepts/change/#diffusion","title":"diffusion","text":"<p>production, reproduction,  transmission  </p>"},{"location":"concepts/change/#restructuring","title":"restructuring","text":"<p>split, union, re-allocation  </p>"},{"location":"concepts/data-models/","title":"data models","text":"<p>Geographical data models are frameworks for storing geographic data within the constraints of computer architectures. They are general templates. Some are specific to individual software platforms, while others are shared across packages and follow general conventions or standards.  </p>"},{"location":"concepts/data-models/#cartographic-model","title":"cartographic model","text":"<p>Tomlin (1990/2012)      </p>"},{"location":"concepts/data-models/#layer","title":"layer","text":"<p>title, metadata, zone(s)  </p>"},{"location":"concepts/data-models/#zone","title":"zone","text":"<p>label, value, location  </p>"},{"location":"concepts/data-models/#value","title":"value","text":"<p>nominal, ordinal, interval, ratio, cyclical, null</p>"},{"location":"concepts/data-models/#location","title":"location","text":"<p>a finite portion of the plane; grid, cell, resolution  </p>"},{"location":"concepts/data-models/#neighborhood","title":"neighborhood","text":"<p>focus, distance  </p>"},{"location":"concepts/data-models/#characteristic","title":"characteristic","text":"<p>punctual, lineal, areal, surficial   </p>"},{"location":"concepts/data-models/#geographic-frameworks","title":"geographic frameworks","text":""},{"location":"concepts/data-models/#coordinate-reference-system-crs","title":"coordinate reference system (CRS)","text":""},{"location":"concepts/data-models/#vector","title":"vector","text":""},{"location":"concepts/data-models/#geometry","title":"geometry","text":""},{"location":"concepts/data-models/#attribute","title":"attribute","text":""},{"location":"concepts/data-models/#feature","title":"feature","text":""},{"location":"concepts/data-models/#collection-table","title":"collection (table)","text":""},{"location":"concepts/data-models/#raster-image","title":"raster image","text":""},{"location":"concepts/data-models/#band","title":"band","text":""},{"location":"concepts/data-models/#image","title":"image","text":""},{"location":"concepts/data-models/#collection","title":"collection","text":""},{"location":"concepts/data-models/#image-collection","title":"image collection","text":""},{"location":"concepts/data-models/#temporal","title":"temporal","text":""},{"location":"concepts/data-operations/","title":"data operations","text":""},{"location":"concepts/data-operations/#map-algebra","title":"map algebra","text":""},{"location":"concepts/data-operations/#local-operations","title":"local operations","text":""},{"location":"concepts/data-operations/#focal-operations","title":"focal operations","text":""},{"location":"concepts/data-operations/#zonal-operations","title":"zonal operations","text":""},{"location":"concepts/data-operations/#binary-spatial-relations","title":"binary spatial relations","text":"<p>These ask binary (true or false) questions about a spatial relationship between two geometry objects. They define criteria used to query (filter, select) geometry objects.           </p>"},{"location":"concepts/data-operations/#disjoint","title":"disjoint","text":""},{"location":"concepts/data-operations/#meet","title":"meet","text":""},{"location":"concepts/data-operations/#overlap","title":"overlap","text":""},{"location":"concepts/data-operations/#inside","title":"inside","text":""},{"location":"concepts/data-operations/#contains","title":"contains","text":""},{"location":"concepts/data-operations/#covers","title":"covers","text":""},{"location":"concepts/data-operations/#covered-by","title":"covered by","text":""},{"location":"concepts/data-operations/#equal","title":"equal","text":""},{"location":"concepts/data-operations/#vector-overlay-operations","title":"vector overlay operations","text":"<p>These compare two geometric zones on two layers and create a new output layer with geometries or features made from one or two parent geometries.  </p>"},{"location":"concepts/data-operations/#intersection","title":"intersection","text":"<p>and</p>"},{"location":"concepts/data-operations/#union","title":"union","text":"<p>or  </p>"},{"location":"concepts/data-operations/#clip","title":"clip","text":"<p>not  </p>"},{"location":"concepts/data-operations/#zonal","title":"zonal","text":""},{"location":"concepts/planning/","title":"planning concepts","text":"<p>Applied geographers believe that people should have good reasons for locating things where they do and parallels the goals of planning professions.  </p> <p>This section lists general concepts from site planning and conservation planning domains that often inform applications of cartographic modeling.         </p>"},{"location":"concepts/planning/#site","title":"site","text":""},{"location":"concepts/planning/#as-system","title":"as system","text":""},{"location":"concepts/planning/#for-purpose","title":"for purpose","text":""},{"location":"concepts/planning/#behavior-settings","title":"behavior settings","text":""},{"location":"concepts/planning/#behavior-programs","title":"behavior programs","text":""},{"location":"concepts/planning/#levels","title":"levels","text":""},{"location":"concepts/planning/#landscape","title":"landscape","text":""},{"location":"concepts/planning/#community","title":"community","text":""},{"location":"concepts/planning/#habitat","title":"habitat","text":""},{"location":"concepts/planning/#species","title":"species","text":""},{"location":"concepts/planning/#conditions","title":"conditions","text":""},{"location":"concepts/planning/#diversity","title":"diversity","text":""},{"location":"concepts/planning/#fragmentation","title":"fragmentation","text":""},{"location":"concepts/planning/#connectivity","title":"connectivity","text":""},{"location":"concepts/planning/#representative","title":"representative","text":""},{"location":"concepts/planning/#rarity","title":"rarity","text":""},{"location":"concepts/spatial/","title":"spatial concepts","text":"<p>Geographers aim to understand why things are located where they are. These questions build on the primitive concepts of a location with one or more conditions (also called values, attributes, or properties).  </p>"},{"location":"concepts/spatial/#analytical-skills","title":"analytical skills","text":"<p>Gersmehl (2005: 97-111) </p>"},{"location":"concepts/spatial/#location","title":"location","text":"<p>Where is it?   </p>"},{"location":"concepts/spatial/#conditions","title":"conditions","text":"<p>What is there? </p>"},{"location":"concepts/spatial/#connections","title":"connections","text":"<p>How are conditions at one location linked with conditions at other places?  </p>"},{"location":"concepts/spatial/#comparison","title":"comparison","text":"<p>How are conditions at one location similar or different to conditions at other places?    </p>"},{"location":"concepts/spatial/#aura","title":"aura","text":"<p>How do conditions at one location influence nearby places?    </p>"},{"location":"concepts/spatial/#region","title":"region","text":"<p>What places are similar to each other and can be grouped together?_  </p>"},{"location":"concepts/spatial/#hierarchy","title":"hierarchy","text":"<p>Where does this place fit in a hierarchy of places?  </p>"},{"location":"concepts/spatial/#transition","title":"transition","text":"<p>How do conditions change between two places?  </p>"},{"location":"concepts/spatial/#analog","title":"analog","text":"<p>What distant places have similar conditions to this place?      </p>"},{"location":"concepts/spatial/#patterns","title":"patterns","text":"<p>How are conditions arranged in imbalances, clusters, strings, rings, or other non-random ways?  </p>"},{"location":"concepts/spatial/#associations","title":"associations","text":"<p>What conditions tend to occur together?  </p>"},{"location":"concepts/spatial/#exceptions","title":"exceptions","text":"<p>Where are places that do not fit the rule?   </p>"},{"location":"methods/ee/","title":"earth engine methods","text":"<p>This is a collection of recurring tasks for cartographic modeling with the javascript code editor for Google Earth Engine. In many cases, the snippets below use data and tools that are shared via my public earth engine repo. Click here to add the repository to the \u201cReader\u201d section in your instance of Code Editor. This will allow you to see the underlying code.  </p>"},{"location":"methods/ee/#load-modules","title":"Load modules","text":""},{"location":"methods/ee/#data-module","title":"Data module","text":"<pre><code>// -------------------------------------------------------------\n//  LOAD DATA MODULE. \n// -------------------------------------------------------------\n\nvar data = require('users/jhowarth/public:modules/data.js');       print('DATA', data);\n</code></pre>"},{"location":"methods/ee/#tasks-module","title":"Tasks module","text":"<pre><code>// -------------------------------------------------------------\n//  LOAD TASKS MODULE. \n// -------------------------------------------------------------\n\nvar t = require('users/jhowarth/public:modules/tasks.js');\n</code></pre>"},{"location":"methods/ee/#layout-module","title":"Layout module","text":"<pre><code>// -------------------------------------------------------------\n//  LOAD LAYOUT MODULE. \n// -------------------------------------------------------------\n\nvar layout = require('users/jhowarth/public:modules/layout.js').layout;\nprint('LAYOUT', layout);\n</code></pre>"},{"location":"methods/ee/#load-data","title":"Load data","text":""},{"location":"methods/ee/#load-fc-from-address","title":"Load FC from address","text":"<pre><code>// -------------------------------------------------------------\n//  LOAD FEATURE COLLECTION FROM ADDRESS. \n\n//  Replace LAYER with a key from the data repo;\n//  or replace argument with EE address string. \n\n// -------------------------------------------------------------\n\nvar output = ee.FeatureCollection(data.LAYER.fc_address);\n</code></pre>"},{"location":"methods/ee/#load-ic-from-address","title":"Load IC from address","text":"<pre><code>// -------------------------------------------------------------\n//  LOAD IMAGE COLLECTION FROM ADDRESS. \n\n//  Replace LAYER with a key from the data repo;\n//  or replace argument with EE address string.  \n// -------------------------------------------------------------\n\nvar output = ee.ImageCollection(data.LAYER.fc_address);\n</code></pre>"},{"location":"methods/ee/#inspect-properties","title":"Inspect properties","text":""},{"location":"methods/ee/#print-first-feature-in-fc","title":"Print first feature in FC","text":"<pre><code>// -------------------------------------------------------------\n//  PRINT FIRST FEATURE IN COLLECTION.  \n\n//  Replace 'LABEL' with appropriate header.  \n//  Replace fc with appropriate variable.\n// -------------------------------------------------------------\n\nprint(\n\"LABEL\",\nfc.first()\n)\n;\n</code></pre>"},{"location":"methods/ee/#print-unique-values-in-fc","title":"Print unique values in FC","text":"<pre><code>// -------------------------------------------------------------\n//  PRINT UNIQUE VALUES OF FEATURE PROPERTY IN COLLECTION. \n\n//  Replace 'LABEL' with appropriate header.  \n//  Replace fc with appropriate variable.\n// -------------------------------------------------------------\n\nprint(\n\"LABEL\",\nfc.aggregate_array().distinct().sort()\n)\n;\n</code></pre>"},{"location":"methods/ee/#print-number-of-objects-in-a-collection","title":"Print number of objects in a collection","text":"<pre><code>// -------------------------------------------------------------\n//  PRINT NUMBER OF OBJECTS IN A COLLECTION. \n\n//  Replace 'LABEL' with appropriate header.  \n//  Replace collection with appropriate variable.\n// -------------------------------------------------------------\n\nprint(\n\"LABEL\",\ncollection.size()\n)\n;\n</code></pre>"},{"location":"methods/ee/#filter-a-collection","title":"Filter a collection","text":""},{"location":"methods/ee/#filter-collection-by-attribute","title":"Filter collection by attribute","text":"<pre><code>// -------------------------------------------------------------\n//  FILTER COLLECTION BY ATTRIBUTE. \n\n//  Input must be a collection.\n//  Output is a collection, where each object in collection satisfies criterion.\n\n//  Set CRITERION (see options in ee.Filter docs).\n//  Set \"property_name\".\n//  Set \"value\".\n// -------------------------------------------------------------\n\nvar output = input\n.filter(ee.Filter.CRITERION(\"property_name\", \"value\"))\n;\n</code></pre>"},{"location":"methods/ee/#filter-collection-by-bounds","title":"Filter collection by bounds","text":"<pre><code>// -------------------------------------------------------------\n//  FILTER COLLECTION BY REGION. \n\n//  Input must be a feature collection.\n//  BOUNDS may be a point, line, or polygon geometry, feature, or feature collection.\n//  Output is a collection, where each object intersects.\n\n\n// -------------------------------------------------------------\n\nvar output = input\n.filterBounds(BOUNDS)\n;\n</code></pre>"},{"location":"methods/ee/#convert-data-models","title":"Convert data models","text":""},{"location":"methods/ee/#convert-fc-to-binary-image","title":"Convert FC to binary image.","text":"<pre><code>// -------------------------------------------------------------\n//  CONVERT TO BINARY IMAGE. \n\n//  INPUT must be a feature collection. \n//  BINARY will be an image with a single band named 'THEME'.\n//  Alter THEME to give the band a custom name.  \n//  Follow naming conventions for bands (no spaces). \n// -------------------------------------------------------------\n\nvar binary = input\n.map(function(f){return f.set('tag', 1)})\n.reduceToImage(\n{\nproperties: ['tag'], reducer: ee.Reducer.max()\n}\n)\n.unmask()\n.rename(['THEME'])\n;\n\nprint(\n\"BINARY\",\nbinary\n)\n;\n</code></pre>"},{"location":"methods/ee/#measure-spatial-properties-in-a-collection","title":"Measure spatial properties in a collection","text":""},{"location":"methods/ee/#area-of-features-acres-in-fc","title":"Area of features (acres) in FC","text":"<pre><code>// -------------------------------------------------------------\n//  CALCULATE AREA (ACRES) OF FEATURES IN COLLECTION. \n// -------------------------------------------------------------\n\n//  This CRS is good for Vermont. Replace if you work elsewhere.\n\nvar crs = \"EPSG:32145\";\n\n//  Input must be a feature collection.\n//  Output is a feature collection.\n//  Each output feature has new property 'acres' that holds the area of feature.\n//  Replace 'acres' with something else to define an alternative property name. \n//  Remember to following naming rules for properties.   \n\nvar output = input\n.map(t.howManyAcres(crs, 'acres'))\n;\n</code></pre>"},{"location":"methods/ee/#area-of-features-sq-km-in-fc","title":"Area of features (sq km) in FC","text":"<pre><code>// -------------------------------------------------------------\n//  CALCULATE AREA (SQUARE KM) OF FEATURES IN COLLECTION. \n// -------------------------------------------------------------\n\n//  This CRS is good for Vermont. Replace if you work elsewhere.\n\nvar crs = \"EPSG:32145\";\n\n//  Input must be a feature collection.\n//  Output is a feature collection.\n//  Each output feature has new property 'sq_km' that holds the area of feature.\n//  Replace 'sq_km' with something else to define an alternative property name.  \n//  Remember to following naming rules for properties (no spaces).\n\nvar output = input\n.map(t.howManySqKm(crs, 'sq_km'))\n;\n</code></pre>"},{"location":"methods/ee/#measure-spatial-properties-of-an-image","title":"Measure spatial properties of an image","text":""},{"location":"methods/ee/#make-pixel-area-image","title":"Make pixel area image","text":"<pre><code>// -------------------------------------------------------------\n//  MAKE PIXEL AREA IMAGE.\n\n//  Returns an image with values that represent pixel area in acres. \n//  Modify second line to alter units. \n// -------------------------------------------------------------\n\nvar output = ee.Image.pixelArea()\n.divide(4046.86)                  // converts to acres\n</code></pre>"},{"location":"methods/ee/#aggregate-features-in-a-collection","title":"Aggregate features in a collection","text":""},{"location":"methods/ee/#sum-the-values-in-a-table-column-fc-propoerty","title":"Sum the values in a table column (FC propoerty)","text":"<pre><code>// -------------------------------------------------------------\n//  SUM THE VALUES IN A TABLE COLUMN (FC PROPERTY) \n\n//  Input must be a feature collection.\n//  Replace 'PROPERTY' with the property name (STRING) to sum.  \n//  Output is a number object.\n// -------------------------------------------------------------\n\nvar answer = input.aggregate_sum('PROPERTY');\n\n// Print results to console.  \n\nprint(\n'ANSWER',\nanswer,                 //  This will report the answer with eleven decimal places.\nanswer.round()          //  This will round to nearest integer.\n);\n</code></pre>"},{"location":"methods/ee/#dissolve-features-in-collection-by-property","title":"Dissolve features in collection by property","text":"<pre><code>// -------------------------------------------------------------\n//  DISSOLVE FEATURES IN COLLECTION BY PROPERTY. \n\n//  Input must be a feature collection.\n//  Replace 'PROPERTY' with the property name to dissolve features.  \n//  Output is a feature collection (with singlepart and multipart features),\n//  where each feature represents the region of a unique property value.  \n// -------------------------------------------------------------\n\n\nvar output = t.dissolveByProperty(input, 'PROPERTY')\n</code></pre>"},{"location":"methods/ee/#overlay-operations","title":"Overlay operations","text":""},{"location":"methods/ee/#erase-values-at-locations-without-a-mask","title":"Erase values at locations without a mask","text":"<pre><code>// -------------------------------------------------------------\n//  ERASE VALUES AT LOCATIONS WITHOUT A MASK.\n\n//  INPUT is an image with values to erase.\n//  BINARY is a binary image {0,1}.\n//  OE (output erased) is an image. \n// -------------------------------------------------------------\n\nvar oe = input\n.multiply(binary)\n\nprint(\n\"ERASED\",\noe\n)\n;\n</code></pre>"},{"location":"methods/ee/#zonal-summary-of-dough-within-cutters","title":"Zonal summary of dough within cutters","text":"<pre><code>// -------------------------------------------------------------\n//  ZONAL SUMMARY OF DOUGH WITHIN CUTTERS.\n\n//  Adjust CRS for your study region.  \n//  DOUGH must be an image with values to summarize. \n//  CUTTERS must be a feature collection.  \n//  Adjust REDUCER for desired summary statistic.\n//  Adjust SCALE to tune processing time vs acceptable accuracy.  \n//  ZS will be a feature collection.\n//  The name of ZS property will reflect the REDUCER.   \n//  In below example, ZS property is 'sum'.  \n// -------------------------------------------------------------\n\nvar crs = \"EPSG:32145\";             // Good for Vermont.\n\nvar zs = dough\n.reduceRegions(\n{\ncollection: cutters, reducer: ee.Reducer.sum(), scale: 3, crs: crs\n}\n)\n;\n</code></pre>"},{"location":"methods/ee/#naip-imagery","title":"NAIP imagery","text":""},{"location":"methods/ee/#tag-naip-collection-with-date-and-number-of-bands","title":"Tag NAIP collection with date and number of bands","text":"<pre><code>// -------------------------------------------------------------\n//  Tag filtered collection with date and number of bands. \n\n//  Collection must be a NAIP image collection.\n// -------------------------------------------------------------\n\noutput = t.tagDateAndBands(collection)\n;\n</code></pre>"},{"location":"methods/ee/#make-mosaic-image-from-image-collection","title":"Make mosaic image from image collection","text":"<pre><code>// -------------------------------------------------------------\n//  Make mosaic image from image collection\n// -------------------------------------------------------------\n\nvar output = t.makeMosaic(collection, year, region);\n</code></pre>"},{"location":"methods/ee/#image-visualization","title":"Image visualization","text":""},{"location":"methods/ee/#make-a-histogram-to-see-data-distribution","title":"Make a histogram to see data distribution","text":"<pre><code>// Make a viz dictionary.\n\nvar input_viz = {\nmin: [0,0,0],                       // List of min in same order as band list.\nmax: [255,255,255],                 // List of max in same order as band list.\nbands: ['R', 'G', 'B']              // In this example, R is index 0, G is index 1, and B is index 2.\n};\n\n// Make a histogram to see data distribution.  \n\nvar b = 0;                            // This targets a band number by the list index. 0 will target R.\nvar i = INPUT;                        // This targets an image. Replace IMAGE with image variable.\nvar v = input_viz;                    // This targets the viz parameters for the image.\n\nvar histogram = t.makeHistogram(\ni,                                  // Must be an image (not an image collection).\nv.bands[b],                         // Select one band at a time.\n3,                                  // Pixel resolution of image.\nv.min[b],                           // Minimum value of x-axis\nv.max[b]                            // Maximum value of x-axis.\n)\n;\n\n// Print, print, print...\n\nprint(\n\"HISTOGRAM\", histogram\n)\n;\n</code></pre>"},{"location":"problems/area/","title":"area problems","text":"<p>Please work through this problem set and then give your best shot at the challenge problem.  </p> <p>Please note that for the first four solutions, I provide outlines and answers to help guide and check your work. Your task is to write scripts based on the outlines that generate the answers.     </p> <p>To get started, create a folder in your working repository named area.</p>"},{"location":"problems/area/#how-much","title":"How much?","text":"<p>We can start with a basic question: how much area does a feature collection contain?  </p> <p>For example:  </p> <p>How much land does Middlebury College own in Vermont? </p> <p>We can answer this question with either a vector or raster solution.  </p> <p>The solutions below all reference code blocks from the ee methods page.</p>"},{"location":"problems/area/#vector-solution","title":"Vector solution","text":"<p>Start a new script in your area folder called 01_basic_vector.js.</p> <p>Insert a code snippet like this as a header:   </p> <pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  BASIC VECTOR SOLUTION\n//  Example: How much land does Middlebury College own?\n\n//  Last modified: insert date\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Work through the steps below.  </p> <ol> <li>Load the data module.</li> <li>Load the tasks module.</li> <li>Define a SUBJECT. <ol> <li>Load feature collection from address.</li> <li>Use the address for parcels owned by college (data.cadastre.college.fc_address).  </li> <li>Inspect the properties of the feature collection.<ol> <li>Print the number of objects in the collection. (A)  </li> </ol> </li> </ol> </li> <li>Calculate area of each SUBJECT feature.  <ol> <li>Area of features (acres) in FC. </li> </ol> </li> <li>Print results:<ol> <li>Print number of objects in the SUBJECT collection. (B)</li> <li>Summarize the total area of all features in the zs collection.<ol> <li>Sum the values in a table column (FC property). (C)</li> </ol> </li> </ol> </li> </ol> Check your answers for vector solution.  (A) Number of parcels owned by the college: 286   (B) Number of objects in the SUBJECT collection: 286   (C) Total acres of college-owned parcels: 7009"},{"location":"problems/area/#raster-solution","title":"Raster solution","text":"<p>In earth engine, a raster solution employs a ZONAL operation.     </p> <p>Start a new script in your area folder called 02_basic_raster.js.</p> <p>Insert a code snippet like this as a header:    </p> <pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  BASIC RASTER SOLUTION\n//  Example: How much land does Middlebury College own?\n\n//  Last modified: insert date\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Work through the steps below.  </p> <ol> <li>Load the data module.</li> <li>Define CUTTERS:  <ol> <li>Load feature collection from address.</li> <li>Use the address for parcels owned by college (data.college.fc_address).  </li> <li>Inspect the properties of the feature collection.<ol> <li>Print the number of objects in the collection. (A)  </li> </ol> </li> </ol> </li> <li>Define the DOUGH:  <ol> <li>Make pixel area image. </li> </ol> </li> <li>Compute Zonal Summary (zs):  <ol> <li>Zonal summary of dough within cutters. </li> </ol> </li> <li>Print results:<ol> <li>Print number of objects in the zs collection. (B)</li> <li>Summarize the total area of all features in the zs collection.<ol> <li>Sum the values in a table column (FC property). (C)</li> </ol> </li> </ol> </li> </ol> Check your answers for raster solution.  (A) Number of parcels owned by the college: 286  (B) Number of objects in zs collection: 286   (C) Total acres of college-owned parcels: 7009"},{"location":"problems/area/#reflection","title":"Reflection","text":"<p>Think about the following:  </p> <ol> <li>Compare your answers from the two solutions: how close are they?  </li> <li>How sensitive is the raster solution to your choice of scale?  </li> </ol>"},{"location":"problems/area/#of-a-theme-within-regions","title":"of a theme within regions?","text":"<p>The first two solutions gave us how much area within each and all regions, where a feature collection represents a set of regions.   </p> <p>The next problem looks to measure the amount of a theme within a set of regions.  </p> <p>The basic question is: how much area of a particular theme occurs within a region or set of regions? </p> <p>For example:</p> <p>How many acres of rare or significant natural communities does the College own? </p> <p>This type of problem can be easily solved with a raster overlay operation that builds on the basic solution solved previously.     </p>"},{"location":"problems/area/#raster-solution_1","title":"Raster solution","text":"<p>Start a new script in your area folder called 03_theme_in_regions.js.</p> <p>Insert a code snippet like this as a header:    </p> <pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  THEME IN REGIONS  \n//  Example: How many acres of rare or significant natural \n//  communities does Middlebury College own?  \n\n//  Last modified: insert date\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Work through the steps below.  </p> <ol> <li>Load the data module.</li> <li>Load the task module.</li> <li>Define CUTTERS:  <ol> <li>Load feature collection from address.</li> <li>Use the address for parcels owned by college (data.college.fc_address).  </li> <li>Inspect the properties of the feature collection.<ol> <li>Print the number of objects in the collection. (A)  </li> </ol> </li> </ol> </li> <li>Define THEME:  <ol> <li>Load feature collection from address.</li> <li>Use the address for rare natural communities (data.rarity.vt.nc.fc_address). </li> <li>Inspect the properties of the feature collection.<ol> <li>Print first feature in FC.</li> <li>Print unique values in FC.<ol> <li>Explore \u2018S_RANK\u2019.</li> <li>Explore \u2018S_NAME\u2019.  </li> </ol> </li> </ol> </li> <li>Convert FC to binary image.<ol> <li>Use THEME as input.</li> </ol> </li> </ol> </li> <li>Define the DOUGH:  <ol> <li>Make pixel area image. </li> <li>Erase values at locations without a mask.  <ol> <li>Multiply the pixel area image by the theme binary. </li> </ol> </li> </ol> </li> <li>Compute Zonal Summary (zs):  <ol> <li>Zonal summary of dough within cutters. </li> </ol> </li> <li>Print results:<ol> <li>Print number of objects in the zs collection. (B)</li> <li>Summarize the total area of all features in the zs collection.<ol> <li>Sum the values in a table column (FC property). (C)</li> </ol> </li> </ol> </li> </ol> Check your answers for THEME IN REGIONS raster solution.  (A) Number of parcels owned by the college: 286  (B) Number of objects in zs collection: 286   (C) Total acres of rare natural communities on college-owned parcels: 1284"},{"location":"problems/area/#of-a-theme-within-sites-across-regions","title":"of a theme within sites across regions?","text":"<p>In the previous problems, we allowed the extent of a feature collection to define the extent of our analysis.  </p> <p>The next problem looks to make comparisons of THEMES in SITES across COMPARISON REGIONS.  </p> <p>Perhaps you can suggest better terms to describe the general case for this after you work through the problem, but here is the concrete example:  </p> <p>How many acres of rare or significant natural communities does the College own in each town? </p> <p>In this example, the THEME is rare or significant natural communities, the SITES are college parcels, and the REGIONS are towns in Vermont.  </p> <p>This type of problem can again be easily solved with a raster overlay operation that builds on the previous solution.  </p>"},{"location":"problems/area/#raster-solution_2","title":"Raster solution","text":"<p>Start a new script in your area folder called 04_theme_in_sites_across_regions.js.</p> <p>Insert a code snippet like this as a header:    </p> <pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  THEME IN SITES ACROSS REGIONS  \n//  Example: How many acres of rare or significant natural \n//  communities does Middlebury College own in each town?  \n\n//  Last modified: insert date\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Work through the steps below.  </p> <ol> <li>Load the data module.</li> <li>Load the task module.</li> <li>Define SITES:  <ol> <li>Load feature collection from address.</li> <li>Use the address for parcels owned by college (data.college.fc_address).  </li> <li>Inspect the properties of the feature collection.<ol> <li>Print the number of objects in the collection. (A)  </li> </ol> </li> <li>Convert FC to binary image.<ol> <li>Use SITES as input.</li> </ol> </li> </ol> </li> <li>Define REGIONS. <ol> <li>Load feature collection from address.</li> <li>Use the address for parcels owned by college (data.gov.town.fc_address).  </li> <li>Filter collection by bounds.<ol> <li>Filter for towns that intersect college parcels. </li> </ol> </li> <li>Inspect the properties of the feature collection.<ol> <li>Print the number of objects in the collection. (B)  </li> </ol> </li> </ol> </li> <li>Define THEME:  <ol> <li>Load feature collection from address.</li> <li>Use the address for rare natural communities (data.rarity.vt.nc.fc_address). </li> <li>Inspect the properties of the feature collection.<ol> <li>Print first feature in FC.</li> <li>Print unique values in FC.<ol> <li>Explore \u2018S_RANK\u2019.</li> <li>Explore \u2018COMM_TYPE\u2019.  </li> </ol> </li> </ol> </li> <li>Convert FC to binary image.<ol> <li>Use THEME as input.</li> </ol> </li> </ol> </li> <li>Define the DOUGH:  <ol> <li>Make pixel area image. </li> <li>Erase values at locations without a mask.  <ol> <li>Multiply the pixel area image by the theme binary.</li> <li>Also multiply the pixel area image by the cutter binary.  </li> </ol> </li> </ol> </li> <li>Compute Zonal Summary (zs):  <ol> <li>Zonal summary of dough within cutters. <ol> <li>Use REGIONS as your cutters!</li> </ol> </li> </ol> </li> <li>Print results:<ol> <li>Print number of objects in the zs collection. (C)</li> <li>Summarize the total area of all features in the zs collection.<ol> <li>Sum the values in a table column (FC property). (D)</li> </ol> </li> </ol> </li> </ol> Check your answers for THEME IN SITES ACROSS REGIONS raster solution.  (A) Number of parcels owned by the college: 286  (B) Number of towns that intersect college lands: 9   (C) Number of REGIONS in the zs output: 9   (D) Total acres of rare natural communities on college-owned parcels: 1301"},{"location":"problems/area/#reflection_1","title":"Reflection","text":"<p>Please think about these three questions:  </p> <ol> <li>How many cutters do we have in this solution?  </li> <li>How does the total area reported in this solution compare to previous?</li> <li>Why might they differ?  </li> </ol>"},{"location":"problems/area/#map","title":"Map","text":"<p>You can adapt this snippet to map the layers.</p> <pre><code>// ------------------------------------------------------------------------------------------------------\n//  MAP\n// ------------------------------------------------------------------------------------------------------\n\nvar palettes = {\ncutters: '#78b3e0',\ntheme: '#7A995C'\n}\n;\n\nMap.centerObject(regions, 10);\nMap.setOptions('hybrid');\n\nvar regions_style = {color: '#ffffff', width: 6, fillColor: 'ffffff00'};\n\nMap.addLayer(regions.style(regions_style), {}, \"Regions\");\nMap.addLayer(sites, {color: palettes.cutters}, \"Sites\", true, 0.75);\nMap.addLayer(theme, {color: palettes.theme}, \"Theme\");\n</code></pre>"},{"location":"problems/area/#chart","title":"Chart","text":"<p>You can adapt this script to chart your results.  </p> <pre><code>// ------------------------------------------------------------------------------------------------------\n//  Charts  \n// ------------------------------------------------------------------------------------------------------\n\n// Make a bar chart for the total acreage per town.\n\nvar chart = ui.Chart.feature.byFeature(\n{\nfeatures: zs.sort(\"sum\", false), xProperty: 'TOWNNAME', yProperties: ['sum']\n})\n.setSeriesNames(['Rare Nat Communities'])\n.setChartType('ColumnChart')\n.setOptions({\ntitle: 'Town Comparison',\nhAxis: {title: 'Town'},\nvAxis: {title: 'Acres'},\ncolors: [palettes.theme]\n});\n\nprint(chart);\n</code></pre>"},{"location":"problems/area/#challenge-problem","title":"Challenge Problem","text":"<p>The last problem reports the amount of area of a THEME within SITES across REGIONS. Can you modify this solution to make a chart that looks like this?</p> <p></p> <p>Start a new script in your area folder called 05_theme_in_sites_across_regions_challenge.js.</p> <p>Insert a code snippet like this as a header:    </p> <pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  THEME IN SITES ACROSS REGIONS CHALLENGE\n\n//  Compare total area of THEME to total area of SUBJECT. \n\n//  Last modified: insert date\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>You should be able to recycle the majority of your last solution. You just need to do a little surgery. Here are some clues:  </p> <ul> <li>Your dough will need two bands.<ol> <li>One of pixel areas for locations that are THEME and SITE.</li> <li>Another of pixel areas for locations that are THEME.  </li> </ol> </li> </ul> <pre><code>var dough = dough_theme_sites.addBands(dough_theme);\n</code></pre> <ul> <li>You will need to alter some parameters in the Chart to reflect that you are charting two series:  <ol> <li>yProperties  </li> <li>.setSeriesNames  </li> <li>colors   </li> </ol> </li> </ul> <p>No pressure. Please let me know if you have questions.  </p>"},{"location":"problems/nominal/","title":"nominal problems","text":""},{"location":"problems/nominal/#the-case-of-vermonts-land-cover-dataset","title":"The case of Vermont\u2019s Land Cover dataset","text":"<p>Statewide High-Resolution Land Cover Dataset </p> <p>Hosted by Awesome Community Dataset </p>"},{"location":"problems/nominal/#problem","title":"Problem","text":"<p>Improve base layer to:  </p> <ol> <li>Distinguish agricultural lands from grass/shrub and bare classes;  </li> <li>Distinguish tree canopy, grass/shrub of yards and human landscaping from places with greater potential for natural communities.  </li> </ol>"},{"location":"problems/nominal/#get-started","title":"Get started","text":"<ol> <li>Add a header.  </li> <li>Load data and task modules.  </li> <li>Load study site (college lands).</li> <li>Set up map.  </li> </ol>"},{"location":"problems/nominal/#ag-problem","title":"Ag problem","text":""},{"location":"problems/nominal/#load-land-cover-base-layer","title":"Load land cover base layer","text":"<ol> <li>Initialize lc variable.</li> <li>Print to console. </li> <li>Add base layer to map.  </li> </ol>"},{"location":"problems/nominal/#make-grassland-binary","title":"Make grassland binary.","text":"<ol> <li>Load agricultural layer. </li> <li>Add layer to map (to inspect).  </li> <li>Convert ag FC to binary image.  </li> <li>Add binary layer to map.  </li> </ol>"},{"location":"problems/nominal/#generalize-base-layer-to-make-grassshrubbare-binary","title":"Generalize base layer to make grass/shrub/bare binary","text":"<ol> <li>Reclassify land cover base to binary.  </li> <li>Add layer to map (to inspect).</li> </ol>"},{"location":"problems/nominal/#isolate-ag-land-in-grassshrubbare-lands-to-bring-into-land-cover","title":"Isolate ag land in grass/shrub/bare lands to bring into land cover.","text":"<ol> <li>Intersect two binaries. </li> <li>Add layer to map.  </li> </ol>"},{"location":"problems/nominal/#classify-grassshrubbare-lands-that-are-agricultural","title":"Classify grass/shrub/bare lands that are agricultural.","text":"<ol> <li>Add agricultural class to base image. </li> <li>Create new viz dictionary for layer. </li> <li>Create new class list for layer. </li> <li>Add layer to map.  </li> </ol>"},{"location":"problems/nominal/#proximity-problem","title":"Proximity problem","text":""},{"location":"problems/nominal/#load-building-footprint-layer","title":"Load building footprint layer","text":"<ol> <li>Load building feature collection. </li> <li>Add layer to map.  </li> </ol>"},{"location":"problems/nominal/#buffer-buildings-by-influence-zone","title":"Buffer buildings by influence zone.","text":"<ol> <li>Write a function to buffer each building by 50 meters. </li> <li>Apply function to feature collection. </li> <li>Add layer to map.   </li> <li>Convert building influence to binary. </li> <li>Add layer to map. </li> </ol>"},{"location":"problems/nominal/#add-building-influence-to-lc-with-ag-cimage","title":"Add building influence to lc with ag cimage.","text":"<ol> <li>Incorporate the binary image in the lc with ag image.</li> <li>Create new viz dictionary for layer. </li> <li>Create new class list for layer.</li> <li>Add layer to map  </li> </ol>"}]}